import nodemailer from 'nodemailer';
import dotenv from 'dotenv';

dotenv.config();

// ุฅูุดุงุก transporter ูุน ุฅุนุฏุงุฏุงุช Brevo
const transporter = nodemailer.createTransport({
  host: process.env.BREVO_SMTP_HOST,
  port: process.env.BREVO_SMTP_PORT,
  secure: false, // true for 465, false for other ports
  auth: {
    user: process.env.BREVO_SMTP_USER,
    pass: process.env.BREVO_SMTP_PASS,
  },
}); 

async function testBrevoConnection() {
  console.log('๐ ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ูุน Brevo...');
  console.log('๐ง SMTP Host:', process.env.BREVO_SMTP_HOST);
  console.log('๐ SMTP Port:', process.env.BREVO_SMTP_PORT);
  console.log('๐ค SMTP User:', process.env.BREVO_SMTP_USER);
  console.log('๐ API Key (ุขุฎุฑ 10 ุฃุญุฑู):', process.env.BREVO_API_KEY.slice(-10));
  
  try {
    // ุงูุชุญูู ูู ุงูุงุชุตุงู
    console.log('\nโณ ุงูุชุญูู ูู ุงูุงุชุตุงู...');
    await transporter.verify();
    console.log('โ ุงูุงุชุตุงู ูุฌุญ! Brevo ูุชุตู ุจูุฌุงุญ');
    
    // ุฅุฑุณุงู ุฑุณุงูุฉ ุชุฌุฑูุจูุฉ
    console.log('\n๐ค ุฅุฑุณุงู ุฑุณุงูุฉ ุชุฌุฑูุจูุฉ...');
    const testOTP = Math.floor(100000 + Math.random() * 900000).toString();
    console.log('๐ข OTP ุงูููููุฏ:', testOTP);
    
    const mailOptions = {
      from: `${process.env.EMAIL_FROM_NAME} <${process.env.EMAIL_FROM}>`,
      to: process.env.EMAIL_FROM, // ุฅุฑุณุงู ููููุณ ูุงุฎุชุจุงุฑ
      subject: 'ุงุฎุชุจุงุฑ OTP - ููุตุฉ ุงูููุฑุณุงุช',
      html: `
        <div dir="rtl" style="font-family: Arial, sans-serif; text-align: center; padding: 20px;">
          <h2>๐ ุฑูุฒ ุงูุชุญูู (OTP)</h2>
          <p>ูุฐุง ุงุฎุชุจุงุฑ ูุฎุฏูุฉ ุงูุจุฑูุฏ ุงูุฅููุชุฑููู</p>
          <div style="background: #f0f8ff; padding: 20px; border-radius: 10px; margin: 20px 0;">
            <h1 style="color: #007bff; font-size: 32px; letter-spacing: 5px;">${testOTP}</h1>
          </div>
          <p>ุฅุฐุง ูุตูุช ูุฐู ุงูุฑุณุงูุฉุ ูุฅู ุฅุนุฏุงุฏุงุช Brevo ุชุนูู ุจุดูู ุตุญูุญ!</p>
        </div>
      `
    };

    const result = await transporter.sendMail(mailOptions);
    console.log('๐ฌ ุชู ุฅุฑุณุงู ุงูุฑุณุงูุฉ ุจูุฌุงุญ!');
    console.log('๐ Message ID:', result.messageId);
    console.log('โ๏ธ  ุชุญูู ูู ุตูุฏูู ุงููุงุฑุฏ ูู:', process.env.EMAIL_FROM);
    
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุงูุงุชุตุงู ูุน Brevo:');
    console.error('๐ ููุน ุงูุฎุทุฃ:', error.code);
    console.error('๐ ุฑุณุงูุฉ ุงูุฎุทุฃ:', error.message);
    
    // ุงูุชุฑุงุญุงุช ุงูุฅุตูุงุญ
    console.log('\n๐ง ุงูุชุฑุงุญุงุช ุงูุฅุตูุงุญ:');
    
    if (error.code === 'EAUTH') {
      console.log('- ุชุญูู ูู ุตุญุฉ API Key');
      console.log('- ุชุฃูุฏ ูู ุฃู API Key ูู ุตูุงุญูุงุช ุฅุฑุณุงู ุงูุจุฑูุฏ');
      console.log('- ุชุญูู ูู ุตุญุฉ SMTP User');
    }
    
    if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {
      console.log('- ุชุญูู ูู ุงุชุตุงู ุงูุฅูุชุฑูุช');
      console.log('- ุชุฃูุฏ ูู ุตุญุฉ SMTP Host');
    }
    
    if (error.code === 'ESOCKET') {
      console.log('- ุฌุฑุจ Port 25 ุจุฏูุงู ูู 587');
      console.log('- ุชุญูู ูู ุฅุนุฏุงุฏุงุช ุงูุฌุฏุงุฑ ุงููุงุฑู (Firewall)');
    }
  }
}

// ุชุดุบูู ุงูุงุฎุชุจุงุฑ
testBrevoConnection();